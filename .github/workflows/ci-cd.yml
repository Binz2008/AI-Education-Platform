name: AI Education Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ai_education_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend linting
      run: |
        cd backend
        ruff check .
        ruff format --check .
        
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ai_education_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest --cov=app --cov-report=xml
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ai-education-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml up -d --build
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker-compose down

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/
        # Example: docker-compose -f docker-compose.prod.yml up -d
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # Add smoke tests here
        # curl -f https://staging.yourdomain.com/health
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment completed successfully"
        # Add notification logic (Slack, Discord, etc.)

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install performance testing tools
      run: |
        pip install locust
        
    - name: Start services for testing
      run: |
        docker-compose up -d
        sleep 30
        
    - name: Run performance tests
      run: |
        echo "üèÉ‚Äç‚ôÇÔ∏è Running performance tests..."
        # locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000
        
    - name: Cleanup
      run: |
        docker-compose down
